// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model UserModel {
  id       String       @id @default(uuid())
  email    String @unique
  login    String @unique
  phone String? @unique
  hashpassword String
  type String @default("User")
  favorite    Favorite[] @relation("UserBasket")
  Comment  Comment[] @relation("CommentWritenBy")
  avatar String?
  isActive Boolean
  rating Rating[] @relation("RatingWritenBy")
}
model FirstLevelCategory {
    id String         @id @default(uuid())
    name String
    alias String
    secondLevelCategory SecondLevelCategory[] @relation("firstCategory")
}

model SecondLevelCategory {
   id String @id @default(uuid())
   name String @unique
   alias String
   firstLevelCategory FirstLevelCategory @relation("firstCategory", fields: [firstLevelId], references: [id])
   firstLevelId String
   model ModelDevice[] @relation("ModelDevice")
    brands BrandOnSecondCategory[]
}



model Favorite {
    id String @id @default(uuid())
    model ModelDevice @relation("FavoriteUser", fields: [modelId], references: [id])
    user UserModel @relation("UserBasket", fields: [userId], references: [id])
    modelId String
    userId String
}



model ModelDevice {
  id      String       @id @default(uuid())
  name    String @unique
  alias String @unique
  image String?
  Description         String?
  secondCategoryId String
  quantity            Int @default(0)
  favorite Favorite[] @relation("FavoriteUser")
  secondCategory SecondLevelCategory @relation("ModelDevice", fields: [secondCategoryId], references: [id], onUpdate: NoAction)
  Comment             Comment[] @relation("CommentProduct")
  brand Brand @relation("BrandByModel", fields: [brandId], references: [id])
  brandId String
  TagId       String
  rating Rating[] @relation("RatingModel")
  tag   Tag   @relation("TagModels", fields: [TagId], references: [id], onUpdate: NoAction)
}

model Comment {
  id          String       @id @default(uuid())
  createdAt   DateTime  @default(now())
  title String
  pictures String?
  comment     String
  writtenById String
  modelDeviceId   String
  writtenBy   UserModel @relation("CommentWritenBy", fields: [writtenById], references: [id])
  model     ModelDevice   @relation("CommentProduct", fields: [modelDeviceId], references: [id], onUpdate: NoAction)
}
model Rating {
    id          String       @id @default(uuid())
    createdAt   DateTime  @default(now())
    number     Int
    writtenById String
    modelDeviceId   String
    writtenBy   UserModel @relation("RatingWritenBy", fields: [writtenById], references: [id])
    modelDevice     ModelDevice   @relation("RatingModel", fields: [modelDeviceId], references: [id], onUpdate: NoAction)
}

model Tag {
  id      String       @id @default(uuid())
  name     String    @unique
  model   ModelDevice[] @relation("TagModels")
}
model Brand {
  id      String       @id @default(uuid())
  name    String @unique
  secondLevelCategory BrandOnSecondCategory[]
  model ModelDevice[] @relation("BrandByModel")
}
model BrandOnSecondCategory {
   brand       Brand     @relation(fields: [brandId], references: [id])
  brandId     String
  category   SecondLevelCategory @relation(fields: [categoryId], references: [id])
  categoryId String
  @@id([brandId, categoryId])
  }